name: QED Challenge

on:
  push:
    branches:
      - main
      - feat2-cicd
  pull_request:
    branches:
      - main
      - feat2-cicd

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies and tools
        run: |
            npm install \
            && npm install mocha
            
      - name: Run tests with Mocha
        run: ./node_modules/.bin/mocha app.js
          
      - name: Install dependencies and tools
        run: npm install
  
      - name: Run tests with Mocha
        run: ./node_modules/.bin/mocha app.js

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build . -t qed-challenge

      - name: Run Docker container
        run: docker run -d --name qed-challenge -p 3000:3000 qed-challenge

      - name: Test Docker container
        run: |
          sleep 10 # waiting for the container to be up and running
          curl --fail http://localhost:3000 || (docker logs qed-challenge && exit 1)

      - name: Clean up
        run: docker stop qed-challenge && docker rm qed-challenge

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Tag Docker image
        run: docker tag qed-challenge ${{ secrets.DOCKERHUB_USERNAME }}/qed-challenge:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/qed-challenge:latest

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.5  # specify the Terraform version you want to use

      - name: Terraform Init
        working-directory: ./ec2-terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ./ec2-terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./ec2-terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve tfplan

      - name: Extract Terraform Outputs
        working-directory: ./ec2-terraform
        id: extract-outputs
        run: |
          terraform output -json > outputs.json
          cat outputs.json

      - name: Read EC2 Details
        id: read-ec2-details
        run: |
          PUBLIC_IP=$(jq -r '.public_ip.value' outputs.json)
          PRIVATE_KEY_PATH=$(jq -r '.private_key_path.value' outputs.json)
          echo "::set-output name=public_ip::$PUBLIC_IP"
          echo "::set-output name=private_key_path::$PRIVATE_KEY_PATH"

      - name: Deploy to EC2
        run: |
          PUBLIC_IP=${{ steps.read-ec2-details.outputs.public_ip }}
          PRIVATE_KEY_PATH=${{ steps.read-ec2-details.outputs.private_key_path }}
          scp -o StrictHostKeyChecking=no -i $PRIVATE_KEY_PATH $PRIVATE_KEY_PATH ec2-user@$PUBLIC_IP:/home/ec2-user/key.pem
          ssh -o StrictHostKeyChecking=no -i $PRIVATE_KEY_PATH ec2-user@$PUBLIC_IP << 'EOF'
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/qed-challenge:latest
            sudo docker stop qed-challenge || true
            sudo docker rm qed-challenge || true
            sudo docker run -d --name qed-challenge -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/qed-challenge:latest
          EOF
