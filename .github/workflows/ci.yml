name: QED Challenge

on:
  push:
    branches:
      - main
      - feat2-cicd
  pull_request:
    branches:
      - main
      - feat2-cicd

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies and tools
        run: |
          npm install \
          && npm install mocha
      - name: Run tests with Mocha
        run: ./node_modules/.bin/mocha app.js

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build . -t qed-challenge

      - name: Run Docker container
        run: docker run -d --name qed-challenge -p 3000:3000 qed-challenge

      - name: Test Docker container
        run: |
          sleep 10 # waiting for the container to be up and running
          curl --fail http://localhost:3000 || (docker logs qed-challenge && exit 1)

      - name: Clean up
        run: docker stop qed-challenge && docker rm qed-challenge

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Tag Docker image
        run: docker tag qed-challenge ${{ secrets.DOCKERHUB_USERNAME }}/qed-challenge:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/qed-challenge:latest

      - name: Delete previous keys
        run: |
          rm -rf public_key.pub private_key.pem

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5 

      - name: Terraform Init
        working-directory: ./ec2-terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ./ec2-terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          terraform apply -auto-approve | tee terraform_output.txt

      - name: List files in directory
        run: ls -lahtr ec2-terraform/

      - name: Wait for Terraform output file to be created
        run: |
          while [ ! -f ec2-terraform/terraform_output.txt ]; do
            sleep 20
          done

      - name: Print Terraform Output
        run: cat ec2-terraform/terraform_output.txt
          
      - name: Debug Grep Command
        run: |
          grep_result=$(grep -oP 'public_ip = "\K[^"]+' ec2-terraform/terraform_output.txt)
          echo "Grep Result: $grep_result"

      - name: Print Private Key Content
        run: |
          cat private_key.pem
          echo "Contents of private_key.pem:"
          

      - name: setting env
        run: |
          PUBLIC_IP=$(grep -oP 'public_ip = "\K[^"]+' ec2-terraform/terraform_output.txt)
          PRIVATE_KEY_PATH=$(grep -oP 'private_key_path = "\K[^"]+' ec2-terraform/terraform_output.txt)
          echo "::set-output name=public_ip::$PUBLIC_IP"
          echo "::set-output name=private_key_path::$PRIVATE_KEY_PATH"

      - name: Extract info
        run: |
          pwd
          ls -lahtr
          cat terraform_output.txt
          echo "Contents of private_key.pem:"
          cat private_key.pem

      - name: SSH into EC2 and deploy
        if: ${{ always() }}
        run: |
          echo "Public IP: $PUBLIC_IP"
          echo "Private Key Path: $PRIVATE_KEY_PATH"
      
          echo "SSH into EC2 instance at $PUBLIC_IP and deploy..."
          ssh -o StrictHostKeyChecking=no -i $PRIVATE_KEY_PATH runner@$PUBLIC_IP << 'EOF'
            sudo docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/qed-challenge:latest
            sudo docker stop qed-challenge || true
            sudo docker rm qed-challenge || true
            sudo docker run -d --name qed-challenge -p 3000:3000 ${{ secrets.DOCKERHUB_USERNAME }}/qed-challenge:latest
          EOF

      - name: Terraform Destroy if Failed
        if: ${{ failure() }}
        working-directory: ./ec2-terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform destroy -auto-approve